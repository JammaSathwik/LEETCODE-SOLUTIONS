class Solution {
public:
    ListNode* reverse(ListNode* x)
    {
        if(x==NULL || x->next==NULL) return x;
        ListNode* y = new ListNode(x->val);
        x=x->next;
        while(x!=NULL)
        {
            ListNode* z = new ListNode(x->val);
            z->next=y;
            y=z;
            x=x->next;
        }
        return y;
    }
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        if(l1==NULL) return l2;
        if(l2==NULL) return l1;
        stack<int> s1,s2;
        int carry=0;
        while(l1!=NULL){
            s1.push(l1->val);
            l1=l1->next;
        }
        while(l2!=NULL){
            s2.push(l2->val);
            l2=l2->next;
        }
        ListNode* y = new ListNode();
        ListNode* z = y;
        while(!s1.empty() && !s2.empty()){
            ListNode* x = new ListNode((s1.top()+s2.top()+carry)%10);
            carry = (carry+s1.top()+s2.top())/10;
            y->next=x;
            y=y->next;
            s1.pop();
            s2.pop();
        }
        while(!s1.empty()){
            ListNode* x = new ListNode((s1.top()+carry)%10);
            carry = (carry+s1.top())/10;
            y->next=x;
            y=y->next;
            s1.pop();
        }
        while(!s2.empty()){
            ListNode* x = new ListNode((s2.top()+carry)%10);
            carry = (carry+s2.top())/10;
            y->next=x;
            y=y->next;
            s2.pop();
        }
        if(carry ==1)
        {
            ListNode* x = new ListNode(1);
            y->next=x;
        }
        return reverse(z->next);
    }
};
